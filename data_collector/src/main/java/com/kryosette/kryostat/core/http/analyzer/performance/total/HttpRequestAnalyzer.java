package com.kryosette.kryostat.core.http.analyzer.performance.total;

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.ArrayList;
import java.util.DoubleSummaryStatistics;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.stream.Collectors;

public class HttpRequestAnalyzer {
    private static final HttpClient httpClient = HttpClient.newBuilder()
            .connectTimeout(Duration.ofSeconds(3))
            .build();

    public static void main(String[] args) throws Exception {
        String targetUrl = "http://localhost:8092/api/rooms/11/messages";
        int requestCount = 100;

        // 1. –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏ —Å–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        List<CompletableFuture<Long>> futures = new ArrayList<>();
        for (int i = 0; i < requestCount; i++) {
            futures.add(measureRequestTime(targetUrl));
        }

        // 2. –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        List<Long> responseTimes = futures.stream()
                .map(CompletableFuture::join)
                .collect(Collectors.toList());

        // 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        analyzeResponseTimes(responseTimes);
    }

    private static CompletableFuture<Long> measureRequestTime(String url) {
        long startTime = System.nanoTime();
        String token = "19024586-ba1e-44fe-9f09-e337f2d7793f";
        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(url))
                .header("Authorization", "Bearer " + token)
                .header("Content-Typing", "application/json")
                .timeout(Duration.ofSeconds(5))
                .build();

        return httpClient.sendAsync(request, HttpResponse.BodyHandlers.ofString())
                .thenApply(response -> {
                    long duration = (System.nanoTime() - startTime) / 1_000_000; // –º—Å
                    System.out.printf("–ó–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω –∑–∞ %d –º—Å —Å –∫–æ–¥–æ–º %d%n",
                            duration, response.statusCode());
                    return duration;
                });
    }

    private static void analyzeResponseTimes(List<Long> times) {
        DoubleSummaryStatistics stats = times.stream()
                .mapToDouble(Long::doubleValue)
                .summaryStatistics();

        double mean = stats.getAverage();
        double variance = times.stream()
                .mapToDouble(time -> Math.pow(time - mean, 2))
                .average()
                .orElse(0.0);
        double stdDev = Math.sqrt(variance);

        System.out.println("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:");
        System.out.printf("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: %d%n", times.size());
        System.out.printf("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: %.2f –º—Å%n", mean);
        System.out.printf("–ú–∏–Ω/–ú–∞–∫—Å: %.2f/%.2f –º—Å%n",
                stats.getMin(),
                stats.getMax());
        System.out.printf("–î–∏—Å–ø–µ—Ä—Å–∏—è: %.2f –º—Å¬≤%n", variance);
        System.out.printf("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: %.2f –º—Å%n", stdDev);

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ + 2œÉ
        double threshold = mean + 2 * stdDev;
        long slowRequests = times.stream().filter(t -> t > threshold).count();
        System.out.printf("–ó–∞–ø—Ä–æ—Å–æ–≤ > —Å—Ä–µ–¥–Ω–µ–µ + 2œÉ: %d (%.1f%%)%n",
                slowRequests, (slowRequests * 100.0 / times.size()));
    }
}